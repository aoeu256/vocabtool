// Generated by CoffeeScript 1.4.0
"strict";

var App, DEBUG, DISABLE_SOUND, Done5Time, Game, Globals, LOG, MyLog, Sound, SoundEffect, StatDay, Stats, Tips, VERSION, WordList, addOrSet, all, any, arrayCut, arrayRepeat, betw, charts, clamp, cleared, construct, copyObject, createObject, daydiff, eql, errlog, filterlist, fixAng, getdefault, hashFromPairs, i, load, loadImage, neql, permute, playchainsound, randItem, set, setupcharts, shift, sm2interval, sounds, splitAt, tapev, tapid, test1, tip, tomorrow, zfill, _i, _len,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __slice = [].slice,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DEBUG = false;

VERSION = 3;

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};

loadImage = function(name) {
  var img;
  img = new Image();
  img.src = "images/" + name + ".png";
  if (!img) {
    log("failed loading image");
  }
  return img;
};

fixAng = function(a) {
  var ang;
  ang = a;
  while (ang > 2 * Math.PI) {
    ang -= 2 * Math.PI;
  }
  while (ang < 0) {
    ang += 2 * Math.PI;
  }
  return ang;
};

zfill = function(n, v, optC) {
  var c, i, s;
  s = n + "";
  c = optC || "0";
  i = s.length;
  while (i < v) {
    s = c + s;
    i++;
  }
  return s;
};

createObject = function(o) {
  var F;
  F = function() {
    return {};
  };
  F.prototype = o;
  return new F();
};

clamp = function(a, mn, mx) {
  return Math.max(Math.min(a, mx), mn);
};

Object.clone = function(obj) {
  var i, target;
  target = {};
  for (i in obj) {
    if (obj.hasOwnProperty(i)) {
      target[i] = obj[i];
    }
  }
  return target;
};

Object.update = function(target, obj) {
  var i, _results;
  _results = [];
  for (i in obj) {
    if (obj.hasOwnProperty(i)) {
      _results.push(target[i] = obj[i]);
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

construct = function(constructor, args) {
  var F;
  F = function() {
    return constructor.apply(this, args);
  };
  F.prototype = constructor.prototype;
  return new F();
};

copyObject = function(cls, data, args) {
  var k, o, _i, _len;
  if (args == null) {
    args = [];
  }
  o = construct(cls, args);
  for (_i = 0, _len = data.length; _i < _len; _i++) {
    k = data[_i];
    if (data.hasOwnProperty(i)) {
      o[i] = data[i];
    }
  }
  return o;
};

Object.size = function(obj) {
  var key;
  return ((function() {
    var _results;
    _results = [];
    for (key in obj) {
      _results.push(1);
    }
    return _results;
  })()).length;
};

Object.keys = function(obj) {
  var x, _i, _len, _results;
  if (obj.hasOwnProperty(x)) {
    _results = [];
    for (_i = 0, _len = obj.length; _i < _len; _i++) {
      x = obj[_i];
      _results.push(x);
    }
    return _results;
  }
};

Object.values = function(obj) {
  var x, _i, _len, _results;
  if (obj.hasOwnProperty(x)) {
    _results = [];
    for (_i = 0, _len = obj.length; _i < _len; _i++) {
      x = obj[_i];
      _results.push(obj[x]);
    }
    return _results;
  }
};

load = function() {
  var loadData, parseData;
  parseData = function(line) {
    var i, key, last, meaning, ndat, pron, s;
    ndat = line.split(" ");
    key = ndat[1];
    pron = [ndat[2].slice(1)];
    s = "";
    i = 3;
    while (true) {
      pron.push(ndat[i]);
      if (ndat[i][ndat[i].length - 1] === "]") {
        last = pron.length - 1;
        pron[last] = pron[last].slice(0, pron[last].length - 1);
        break;
      }
      i++;
    }
    meaning = ndat.slice(i + 1).join();
    return meaning = meaning.slice(1, meaning.length - 1);
  };
  loadData = function(dat) {
    var line, lines, _results;
    lines = dat.split("\n");
    _results = [];
    for (line in lines) {
      _results.push(parseData(line));
    }
    return _results;
  };
  return $.ajax({
    url: "cmudict.txt",
    success: loadData,
    dataType: "text"
  });
};

arrayRepeat = function(val, n) {
  var i, _i, _results;
  if (n > 1) {
    _results = [];
    for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
      _results.push(val);
    }
    return _results;
  } else {
    return [];
  }
};

randItem = function(lst) {
  return lst[Math.floor(Math.random() * lst.length)];
};

arrayCut = function(arr, x) {
  return arr.slice(0, x).concat(arr.slice(x + 1, arr.length));
};

arrayCut = function(arr, x) {
  return arr.slice(0, x).concat(arr.slice(x + 1, arr.length));
};

shift = function(arr) {
  var i, newarr, tail;
  newarr = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      i = arr[_i];
      if (i !== "") {
        _results.push(i);
      }
    }
    return _results;
  })();
  tail = arrayRepeat("", arr.length - newarr.length);
  return [newarr.concat(tail), newarr.length];
};

hashFromPairs = function(pairs) {
  var hash, key, value, _i, _len, _ref;
  hash = {};
  for (_i = 0, _len = pairs.length; _i < _len; _i++) {
    _ref = pairs[_i], key = _ref[0], value = _ref[1];
    hash[key] = value;
  }
  return hash;
};

permute = function(lst) {
  var newlst, r, x, _ref;
  newlst = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = lst.length; _i < _len; _i++) {
      x = lst[_i];
      _results.push(x);
    }
    return _results;
  })();
  for (x in lst) {
    r = Math.floor(Math.random() * lst.length);
    _ref = [newlst[r], newlst[x]], newlst[x] = _ref[0], newlst[r] = _ref[1];
  }
  return newlst;
};

set = function(lst) {
  var d, x, _i, _len;
  d = {};
  for (_i = 0, _len = lst.length; _i < _len; _i++) {
    x = lst[_i];
    d[x] = true;
  }
  return d;
};

getdefault = function(obj, key, v) {
  if (__indexOf.call(obj, key) >= 0) {
    return obj[key];
  } else {
    return v;
  }
};

playchainsound = function(n) {
  return null;
};

MyLog = (function() {

  function MyLog(list) {
    this.list = list != null ? list : [];
  }

  MyLog.prototype.put = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return this.list.push(args);
  };

  MyLog.prototype.output = function() {
    var i, _i, _len, _ref, _results;
    _ref = this.list;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _results.push(console.log(i));
    }
    return _results;
  };

  return MyLog;

})();

sm2interval = function(EF, intv, q) {
  var ef, pv;
  ef = Math.max(EF + (0.1 - (5 - q) * (0.08 + (5 - q) * 0.02)), 1.3);
  pv = parseInt(intv);
  if (pv === 0) {
    return [1, ef];
  } else if (pv === 1) {
    return [4 + Math.random() * 4, ef];
  } else {
    return [intv * ef, ef];
  }
};

filterlist = function(listA, subList) {
  var i, rb, _i, _len, _results;
  rb = set(subList);
  _results = [];
  for (_i = 0, _len = listA.length; _i < _len; _i++) {
    i = listA[_i];
    if (!(rb[i] != null)) {
      _results.push(i);
    }
  }
  return _results;
};

daydiff = function(a, b) {
  if (b == null) {
    b = 0;
  }
  return (a - b) / 24.0 / 3600.0 / 1000;
};

splitAt = function(n, lst) {
  return [lst.slice(0, +n + 1 || 9e9), lst.slice(n + 1)];
};

tomorrow = function(day) {
  if (day == null) {
    day = 1;
  }
  return Date.now() + 24.0 * 3600 * 1000.0 * day;
};

cleared = function(lst) {
  var i;
  return all((function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = lst.length; _i < _len; _i++) {
      i = lst[_i];
      _results.push(i === '');
    }
    return _results;
  })());
};

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};

addOrSet = function(d, k, v) {
  if (v == null) {
    v = 1;
  }
  if (d[k] != null) {
    return d[k] += v;
  } else {
    return d[k] = v;
  }
};

DISABLE_SOUND = true;

SoundEffect = (function() {

  function SoundEffect(name) {
    this.name = name;
    if (!DISABLE_SOUND) {
      this._snd = new Audio('');
      this._snd.src = '/sounds/' + this.name + '.wav';
    }
  }

  SoundEffect.prototype.play = function() {
    if (!DISABLE_SOUND) {
      return this._snd.play();
    }
  };

  return SoundEffect;

})();

sounds = ['click1', 'click2', 'click3', 'success', 'failure', 'click'];

Sound = {};

for (_i = 0, _len = sounds.length; _i < _len; _i++) {
  i = sounds[_i];
  Sound[i] = new SoundEffect(i);
}

Sound.click.play = function() {
  return Sound[i + randItem([1, 2, 3])].play();
};

StatDay = (function() {

  function StatDay(date, time, _new, review) {
    this.date = date != null ? date : 0;
    this.time = time != null ? time : 0;
    this["new"] = _new != null ? _new : 0;
    this.review = review != null ? review : 0;
  }

  return StatDay;

})();

tapev = function(e) {
  if (e.target.classList[0] === 'ui-icon') {
    e = $(e.target).parent();
  } else {
    e = e.target;
  }
  return $(e).parent();
};

tapid = function(e) {
  return $(tapev(e)).attr('id').split('_');
};

Stats = (function() {

  function Stats(game) {
    var avg;
    this.days = {};
    this.nreviewed = {};
    this.nNew = {};
    avg = new StatDay();
    this.startday = new Date(game.now());
  }

  Stats.prototype.average = function(game, day1, day2) {
    var avg, nday, stat, sum, _j, _k, _l, _len1, _len2;
    sum = new StatDay();
    avg = new StatDay();
    nday = 0;
    for (i = _j = day1; day1 <= day2 ? _j <= day2 : _j >= day2; i = day1 <= day2 ? ++_j : --_j) {
      nday++;
      for (_k = 0, _len1 = sum.length; _k < _len1; _k++) {
        stat = sum[_k];
        sum[stat] += getdefault(this.days, i, 0);
      }
    }
    for (_l = 0, _len2 = sum.length; _l < _len2; _l++) {
      stat = sum[_l];
      avg[stat] = sum[stat] / nday;
    }
    return avg;
  };

  Stats.prototype.push = function(game, d) {
    var mastered, nowdate;
    nowdate = new Date(game.now());
    mastered = ((function() {
      var _j, _len1, _ref, _results;
      if (i > 150) {
        _ref = game.interval;
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          i = _ref[_j];
          _results.push(i);
        }
        return _results;
      }
    })());
    return this.days[nowdate.toDateString()] = new StatDay(nowdate, d.time);
  };

  Stats.prototype.addreviewed = function(game, n) {
    var nowdate;
    nowdate = new Date(game.now());
    return addOrSet(this.nreviewed, nowdate.toDateString(), n);
  };

  Stats.prototype.addnov = function(game, n) {
    var nowdate;
    nowdate = new Date(game.now());
    return addOrSet(this.nNew, nowdate.toDateString(), n);
  };

  return Stats;

})();

WordList = (function() {

  function WordList(title, tabdata, cols, author, nusers) {
    this.title = title;
    this.tabdata = tabdata;
    this.cols = cols;
    this.author = author;
    this.nusers = nusers;
  }

  WordList.prototype.showmode = function() {
    return null;
  };

  return WordList;

})();

Game = (function() {
  var musteq;

  Game.prototype.now = function() {
    if (this.nowtime) {
      return this.nowtime;
    } else {
      return Date.now();
    }
  };

  function Game(words, hanzi2data, DEBUG, cols) {
    this.words = words;
    this.hanzi2data = hanzi2data;
    this.DEBUG = DEBUG != null ? DEBUG : {};
    this.cols = cols != null ? cols : ['hanzi', 'pinyin', 'keyword'];
    this.zimode = __bind(this.zimode, this);

    this._nowtime = null;
    this._oldtime = null;
    Object.defineProperty(this, 'nowtime', {
      get: function() {
        return this._nowtime - this._oldtime + Date.now();
      },
      set: function(v) {
        this._nowtime = v;
        return this._oldtime = Date.now();
      }
    });
    this.Nitems = 10;
    this.ndone = 0;
    this.showqueue = [];
    this.failqueue = [];
    this.errorqueue = [];
    this.history = [];
    this.interval = {};
    this.reviewcards = [];
    this.keyword = arrayRepeat("", this.Nitems);
    this.pinyin = arrayRepeat("", this.Nitems);
    this.hanzi = arrayRepeat("", this.Nitems);
    this.slotmode = arrayRepeat("", this.Nitems);
    this.errormode = arrayRepeat("", this.Ntimes);
    this.rowq = arrayRepeat(-1, this.Nitems);
    this._Tips = new Tips();
    this.tip = function(t) {
      return this._Tips.tip(t);
    };
    this.stat = new Stats(this);
    this.word2col = {};
    this.select = {};
    this.wordid = 0;
    this.mode = {};
    this.timer = {};
    this.Updatetable = true;
    this.loopcount = 0;
    this.gamehistory = [];
    this.laststate = [];
    this.clicktime = {};
    this.laststatec = 0;
    this.hanzi2clicktime = {};
    this.review = {};
    this.error = {};
    this.penalty = {};
    this.locked = false;
    this.maxreviews = 80;
    this.errorwords = [];
    this.matchwords = [];
    this.errormatch = [];
    this.newperday = 20;
    this.shownday = 0;
    this.lasttime = this.now();
    this.goaltime = 0;
    this.dueday = {};
    this.deltaday = {};
    this.lastseen = {};
    this.newperweekday = {};
    this.round2 = false;
    this.curstate = ['show', 1, false];
    this.avg_zinterval = {};
    this.datalen = this.cols.length - 1;
    this.key = this.cols[0];
    this.datacols = this.cols.slice(1);
    this.ncongrats = 0;
    this.chains = {};
    this.skipcorrect = 0;
    this.skipped = {};
    this.succfail = {};
    this.leechrate = 5;
    this.skipped = {};
    this.storyRating = {};
    this.storyRated = {};
    this.colTitles = this.cols;
    if (this.words.length % (this.Nitems * 2) !== 0) {
      alert('words is not divisible by ', this.Nitems * 2);
    }
  }

  Game.prototype.popupStories = function(it) {
    var $cont, stories, storyelement, storylst,
      _this = this;
    storyelement = function(text, author, date, rating) {
      var a, b, d, grid, item, minbot, plusbot, storycont, storyid, userid;
      item = '私';
      userid = 'lol' + randItem([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
      storyid = userid + '_' + item;
      storycont = '<div style="display=block; float: left;">';
      storycont += '<p style="margin-bottom:0px">' + text + '</p>';
      minbot = '<a data-role="button" data-iconpos="notext" id="plus_' + storyid + '" class="ratebut" data-inline="true" data-theme="b" data-icon="plus"></a>';
      plusbot = '<a data-role="button" data-iconpos="notext" id="min_' + storyid + '" class="ratebut" data-inline="true" data-theme="b" data-icon="minus"></a>';
      a = '<a>' + author + '</a>  Rating:<span id="rating_' + storyid + '">' + rating + '</span>';
      b = plusbot + minbot;
      d = new Date(date);
      d = d.toLocaleDateString();
      grid = '<div class="lol style="display:table;"><h3 style="margin-top:0px; margin-bottom:0px; float: left">' + a + b + '</h3><small style="float: right; line-heighT: 300%;">' + d + '</small></div>';
      storycont += grid;
      storycont += '</div>';
      storycont += '<hd/>';
      _this.storyRating[storyid] = rating;
      _this.storyRated[storyid] = false;
      return storycont;
    };
    stories = '';
    storylst = [];
    $('#storypopup').show();
    $('#storypopup div h3').html($('#storypopup div h3').html() + ' - ' + it);
    $.mobile.changePage('#storypopup', 'pop', true, true);
    $cont = $('#storypopup [data-role="content"]');
    $cont.html($cont.html() + '<div id="loadcont">Loading...</div>');
    $cont.trigger('create');
    this.call('get_stories', it, function(data, a, b) {
      var author, date, rating, text, _j, _len1, _ref;
      storylst = JSON.parse(data);
      for (_j = 0, _len1 = storylst.length; _j < _len1; _j++) {
        _ref = storylst[_j], author = _ref[0], rating = _ref[1], text = _ref[2], date = _ref[3];
        console.log([author, rating, text, date]);
        stories += storyelement(text, author, date, rating);
      }
      $('#loadcont').html(stories);
      $cont.trigger('create');
      return $('#storypopup a[data-role="button"]').unbind('tap').tap(function(e) {
        var id, item, n, other, typ, userid, _ref1;
        _ref1 = tapid(e), typ = _ref1[0], userid = _ref1[1], item = _ref1[2];
        id = userid + '_' + item;
        console.log('oeu', [typ, userid, item]);
        if (typ === 'plus') {
          n = 1;
        }
        if (typ === 'min') {
          n = -1;
        }
        other = typ === 'plus' ? 'min' : 'plus';
        if ($('#' + other + '_' + id).hasClass('ui-disabled')) {
          $('#' + other + '_' + id).removeClass('ui-disabled');
        } else {
          $('#' + typ + '_' + id).addClass('ui-disabled');
        }
        _this.storyRated[id] = true;
        addOrSet(_this.storyRating, id, n);
        console.log(id);
        $('#rating_' + id).text(_this.storyRating[id]);
        return _this.call('post_vote', [userid, item, n]);
      });
    });
    return $(document).on("popupafterclose", ".ui-popup", function(e) {
      return $(e.target).hide();
    });
  };

  Game.prototype.matchdata = function(zi) {
    var rhand;
    rhand = (function() {
      var _j, _len1, _ref, _results;
      _ref = this.datacols;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        i = _ref[_j];
        _results.push(this[i][this.select[i]]);
      }
      return _results;
    }).call(this);
    console.log('rhand', rhand);
    return JSON.stringify(this.hanzi2data[zi]) === JSON.stringify(rhand);
  };

  Game.prototype.makezigroups = function() {
    var word, zi, _j, _len1, _ref, _results;
    this.zigroup = {};
    _ref = this.words;
    _results = [];
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      word = _ref[_j];
      _results.push((function() {
        var _k, _len2, _results1;
        _results1 = [];
        for (_k = 0, _len2 = word.length; _k < _len2; _k++) {
          zi = word[_k];
          if (this.zigroup[zi] != null) {
            _results1.push(this.zigroup[zi].push(word));
          } else {
            _results1.push(this.zigroup[zi] = [word]);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Game.prototype.updateZiGroup = function(zi) {
    var adjf, allavg, allintv, oavg, ointv, otherwords, sum, words;
    words = this.zigroup[zi];
    otherwords = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = words.length; _j < _len1; _j++) {
        i = words[_j];
        if (i !== zi) {
          _results.push(i);
        }
      }
      return _results;
    })();
    ointv = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = otherwords.length; _j < _len1; _j++) {
        i = otherwords[_j];
        _results.push(this.interval[i][0]);
      }
      return _results;
    }).call(this);
    allintv = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = words.length; _j < _len1; _j++) {
        i = words[_j];
        _results.push(this.interval[i][0]);
      }
      return _results;
    }).call(this);
    sum = function(lst) {
      var o, s, _j, _len1;
      s = 0;
      for (_j = 0, _len1 = lst.length; _j < _len1; _j++) {
        o = lst[_j];
        s += o;
      }
      return s;
    };
    oavg = sum(ointv) / ointv.length;
    allavg = sum(allintv) / allintv.length;
    return adjf = allavg / oavg;
  };

  Game.prototype.newtoday = function() {
    return this.newperweekday[(new Date(this.now())).getDay()];
  };

  Game.prototype.switchPage = function(page) {
    $.mobile.changePage('#' + page + 'page');
    if (this[page + '_start'] != null) {
      return this[page + '_start']();
    }
  };

  Game.prototype.goal_start = function() {
    var elapsedTime, key, string2id, tex,
      _this = this;
    elapsedTime = this.now() - this.gamestarttime;
    string2id = {
      ctime: 'Completion Time:' + this.minuteFormat(elapsedTime),
      cardsdue: "Tomorrow at this time " + (this.dueTomorrow().length) + " cards are due for review.",
      newcards: "Tomorrow " + this.newperday + " new cards will be shown."
    };
    for (key in string2id) {
      tex = string2id[key];
      $('#' + key).text(tex);
    }
    this.stat.push(this, {
      time: elapsedTime
    });
    $('#finishbut').unbind('click').click(function() {
      return _this.switchPage('start');
    });
    return console.log(string2id);
  };

  Game.prototype.start_start = function() {
    var dd, key, string2id, tex,
      _this = this;
    this.shownday = 0;
    this.curstate = ['show', 1, false];
    dd = daydiff(this.now(), this.lasttime);
    string2id = {
      ndue: this.dueToday(dd).length,
      wordid: this.wordid,
      wordlen: this.words.length
    };
    for (key in string2id) {
      tex = string2id[key];
      $('#' + key).text(tex);
    }
    return $('#reviewbut').unbind('click').click(function() {
      _this.newperday = parseInt($("#newperday input[type='radio']:checked").val());
      _this.maxreviews = parseInt($("#maxreviews input[type='radio']:checked").val());
      return _this.switchPage('game');
    });
  };

  Game.prototype.game_start = function() {
    this.slottime = arrayRepeat(0, this.Ntimes);
    this.slotq = arrayRepeat(0, this.Ntimes);
    this.nreviewed = 0;
    this.zishift = {};
    this.gamestarttime = this.now();
    this.curstate = ['show', 1, false];
    this.chainn = 0;
    this.drawTab();
    return this.nextloop();
  };

  Game.prototype.geticon = function(state, errorstate) {
    if (state === "match") {
      return {
        'correct': 'check',
        'wrong': 'delete',
        'none': 'alert'
      }[errorstate];
    } else {
      return {
        'show': 'radio-off',
        'done': 'radio-on',
        'wrong': 'close'
      }[state];
    }
  };

  Game.prototype.doslot = function(col, tr, state, contents) {
    var $elt, icon;
    if (state == null) {
      state = null;
    }
    if (contents == null) {
      contents = null;
    }
    if (DEBUG === true) {
      return;
    }
    $elt = $("#" + col + "_" + tr);
    state = state != null ? state : this.slotmode[tr];
    icon = this.geticon(state, this.errormode[tr]);
    if (icon) {
      $elt.buttonMarkup({
        icon: icon
      });
    }
    if (contents !== null) {
      $elt.find('a').text(contents);
    }
    if (col === 'hanzi' && state === 'match' && this.rowq[tr] >= 2) {
      $elt.find('a').text(this.hanzi[tr] + ' ' + (this.rowq[tr] - 1));
    }
    if (contents === 'empty') {
      return $elt.addClass('ui-disabled');
    } else {
      return $elt.removeClass('ui-disabled');
    }
  };

  Game.prototype.updateSlot = function(tr) {
    var change, col, error2icon, state, state2icon, _j, _k, _l, _len1, _len2, _len3, _ref, _ref1, _ref2, _results, _results1, _results2;
    if (DEBUG === true) {
      return;
    }
    state = this.slotmode[tr];
    change = function(s, val, icon) {
      var $elt;
      if (icon == null) {
        icon = null;
      }
      $elt = $('#' + s);
      $elt.find('a').text(val);
      if (val === 'empty') {
        $elt.addClass('ui-disabled');
        $elt.buttonMarkup({
          'icon': ''
        });
      } else {
        $elt.removeClass('ui-disabled');
      }
      if (icon !== null) {
        return $elt.buttonMarkup({
          'icon': icon
        });
      }
    };
    state2icon = {
      'show': 'radio-off',
      'done': 'radio-on'
    };
    if (state === "show" || state === "done") {
      change('hanzi_' + tr, this.hanzi[tr], state2icon[state]);
      _ref = ['pinyin', 'keyword'];
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        col = _ref[_j];
        _results.push(change(col + '_' + tr, this[col][tr], 'info'));
      }
      return _results;
    } else if (state === "match") {
      error2icon = {
        'correct': 'check',
        'wrong': 'close',
        'none': 'alert'
      };
      _ref1 = this.cols;
      _results1 = [];
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        col = _ref1[_k];
        _results1.push(this.doslot(col, tr, 'match', this[col][tr]));
      }
      return _results1;
    } else if (state === '') {
      _ref2 = this.cols;
      _results2 = [];
      for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
        col = _ref2[_l];
        _results2.push(change(col + '_' + tr, 'empty'));
      }
      return _results2;
    }
  };

  Game.prototype.changeSlot = function(tr, state) {
    this.slotmode[tr] = state;
    if (state === 'match') {
      this.errormode[tr] = 'none';
    }
    if (state === 'match') {
      this.slottime[tr] = 0;
    }
    return this.updateSlot(tr);
  };

  Game.prototype.zimode = function(tr, state) {
    this.mode[this.hanzi[tr]] = state;
    return this.updateSlot(tr);
  };

  Game.prototype.queuepop = function(n, queu) {
    var lst, qu, _j, _len1;
    lst = [];
    for (_j = 0, _len1 = queu.length; _j < _len1; _j++) {
      qu = queu[_j];
      if (qu.t === 0) {
        while (lst.length < n && qu.items.length > 0) {
          lst.push([qu.items.pop(), 'match']);
        }
      }
    }
    return lst;
  };

  Game.prototype.getWords = function(n) {
    var lst, tail, wd;
    lst = this.queuepop(n, this.errorqueue);
    lst = this.queuepop(n - lst.length, this.showqueue);
    if (this.DEBUG['queue']) {
      this.log("@showqueue is " + (lst.toSource()));
    }
    this.showqueue = (function() {
      var _j, _len1, _ref, _results;
      _ref = this.showqueue;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        i = _ref[_j];
        if (i.items.length > 0) {
          _results.push(i);
        }
      }
      return _results;
    }).call(this);
    wd = n - lst.length;
    this.wordid += wd;
    tail = (function() {
      var _j, _len1, _ref, _results;
      _ref = this.words.slice(this.wordid - wd, +(this.wordid - 1) + 1 || 9e9);
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        i = _ref[_j];
        _results.push([i, 'show']);
      }
      return _results;
    }).call(this);
    return lst.concat(tail);
  };

  Game.prototype.log = function(s) {
    return console.log(s);
  };

  Game.prototype.clone = function() {
    var removeSet, target;
    removeSet = 'gamehistory laststate laststatec _looplog save';
    removeSet = set(removeSet.split(' '));
    target = {};
    for (i in this) {
      if (this.hasOwnProperty(i) && !(removeSet[i] != null)) {
        target[i] = this[i];
      }
    }
    return target;
  };

  Game.prototype.shifthanzi = function(debug) {
    var beg, data, hanzi2slot, key, _j, _ref, _ref1;
    if (debug == null) {
      debug = false;
    }
    hanzi2slot = {};
    for (i = _j = 0, _ref = this.hanzi.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      if (this.hanzi[i]) {
        hanzi2slot[this.hanzi[i]] = [this.slotmode[i], this.errormode[i], this.slottime[i], this.pinyin[i], this.keyword[i]];
      }
    }
    if (this.loopcount > 0 && debug) {
      this.log([this.hanzi, hanzi2slot, this.clone()]);
    }
    _ref1 = shift(this.hanzi), this.hanzi = _ref1[0], beg = _ref1[1];
    if (this.loopcount > 0 && debug) {
      this.log([this.hanzi, beg]);
    }
    for (key in hanzi2slot) {
      data = hanzi2slot[key];
      i = this.hanzi.indexOf(key);
      this.slotmode[i] = data[0], this.errormode[i] = data[1], this.slottime[i] = data[2], this.pinyin[i] = data[3], this.keyword[i] = data[4];
      this.changeSlot(i, this.slotmode[i]);
    }
    return beg;
  };

  Game.prototype.updateAllSlots = function() {
    var _j, _ref, _results;
    _results = [];
    for (i = _j = 0, _ref = this.hanzi.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      _results.push(this.changeSlot(i, this.slotmode[i]));
    }
    return _results;
  };

  Game.prototype.newgamehistory = function(locals) {
    var d, key, value;
    d = Object.clone(this);
    delete d['gamehistory'];
    for (key in locals) {
      value = locals[key];
      d[key] = value;
    }
    return this.gamehistory.push(d);
  };

  Game.prototype.row = function(i) {
    return [this.slotmode[i], this.errormode[i], this.slottime[i], this.hanzi[i], this.pinyin[i], this.keyword[i]];
  };

  Game.prototype.setrow = function(i, val) {
    return this.slotmode[i] = val[0], this.errormode[i] = val[1], this.slottime[i] = val[2], this.hanzi[i] = val[3], this.pinyin[i] = val[4], this.keyword[i] = val[5], val;
  };

  Game.prototype.allcol = function() {
    var _j, _ref, _results;
    _results = [];
    for (i = _j = 0, _ref = this.Nitems - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      _results.push(this.row(i));
    }
    return _results;
  };

  Game.prototype.updateDueToday = function(n) {
    var dd, dueToday, k, v, _ref;
    if (n == null) {
      n = 0;
    }
    dd = daydiff(this.now(), this.lasttime);
    dueToday = [];
    _ref = this.dueday;
    for (k in _ref) {
      v = _ref[k];
      if (this.dueday[k] - dd < n && this.nreviewed < this.maxreviews) {
        this.nreviewed++;
        dueToday.push([k, this.dueday[k]]);
        this.deltaday[k] = this.dueday[k] - dd;
        delete this.dueday[k];
      }
    }
    dueToday.sort(function(a, b) {
      return a[1] < b[1];
    });
    return dueToday;
  };

  Game.prototype.dueToday = function() {
    var dd, k, v;
    dd = daydiff(this.now(), this.lasttime);
    return (function() {
      var _ref, _results;
      _ref = this.dueday;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        if (v - dd < 0.05) {
          _results.push(k);
        }
      }
      return _results;
    }).call(this);
  };

  Game.prototype.dueTomorrow = function() {
    var dd, k, v;
    dd = daydiff(this.now(), this.lasttime);
    return (function() {
      var _ref, _results;
      _ref = this.dueday;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        if (v - dd < 1.05) {
          _results.push(k);
        }
      }
      return _results;
    }).call(this);
  };

  Game.prototype.getnextstate = function(mode, round, error) {
    var a, b, d, dd, dueToday, em, erse, lp, newmode, normode, pushround, rc, w, words, _j, _len1, _ref, _ref1,
      _this = this;
    pushround = function() {
      console.log('pushing round', [mode, round, error, _this.errorwords]);
      return _this.saveround = [mode, round, error];
    };
    dd = daydiff(this.now(), this.lasttime);
    if (dd > 1.0) {
      dueToday = this.updateDueToday();
      this.reviewcards = this.reviewcards.concat((function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = dueToday.length; _j < _len1; _j++) {
          i = dueToday[_j];
          _results.push(i[0]);
        }
        return _results;
      })());
      console.log('dueToday', dueToday, 'days elapsed:', dd, this.reviewcards);
    }
    this.lasttime = this.now();
    this.error2 = (function() {
      var _j, _len1, _ref, _ref1, _results;
      _ref = this.errorwords;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        _ref1 = _ref[_j], i = _ref1[0], lp = _ref1[1];
        if (lp < this.loopcount) {
          _results.push(i);
        }
      }
      return _results;
    }).call(this);
    if (error) {
      console.log('popping round', this.saveround);
      _ref = this.saveround, mode = _ref[0], round = _ref[1], error = _ref[2];
    }
    if (this.error2.length > 2) {
      pushround();
      console.log('error2', this.error2, this.errorwords);
      this.error2 = this.error2.slice(0, +(this.Nitems - 1) + 1 || 9e9);
      this.errormatch.push([this.error2.slice(0), this.loopcount]);
      erse = set(this.error2);
      this.errorwords = (function() {
        var _j, _len1, _ref1, _ref2, _results;
        _ref1 = this.errorwords;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          _ref2 = _ref1[_j], a = _ref2[0], b = _ref2[1];
          if (!(erse[a] != null)) {
            _results.push([a, b]);
          }
        }
        return _results;
      }).call(this);
      return ['show', 1, true, this.error2];
    }
    if ((this.errormatch[0] != null) && this.errormatch[0][1] <= this.loopcount - 1) {
      em = this.errormatch.shift()[0];
    } else {
      em = [];
    }
    if (this.reviewcards.length > 1) {
      _ref1 = splitAt(this.Nitems - em.length, this.reviewcards), rc = _ref1[0], this.reviewcards = _ref1[1];
    } else {
      rc = [];
    }
    d = rc.concat(em);
    if (d.length > 1) {
      console.log('recards, errmatch', [rc, em]);
      pushround();
      return ['match', 1, true, d];
    }
    if (error) {
      console.log('Returning to normal:', [mode, round, error]);
    }
    if (round === 1) {
      normode = [mode, 2, error];
    } else {
      newmode = mode === 'show' ? 'match' : 'show';
      normode = [newmode, 1, error];
    }
    if (mode === 'show') {
      if (this.shownday === this.newperday || this.wordid >= this.words.length) {
        return ['congrat', 0, true, []];
      } else {
        words = this.words.slice(this.wordid, +((this.wordid + this.Nitems) - 1) + 1 || 9e9);
        this.wordid += this.Nitems;
        this.shownday += this.Nitems;
        this.review[round] = ((function() {
          var _j, _len1, _results;
          if (!(this.skipped[i] != null)) {
            _results = [];
            for (_j = 0, _len1 = words.length; _j < _len1; _j++) {
              i = words[_j];
              _results.push(i);
            }
            return _results;
          }
        }).call(this));
        for (_j = 0, _len1 = words.length; _j < _len1; _j++) {
          w = words[_j];
          this.lastseen[w] = this.now();
        }
      }
    } else if (mode === 'match') {
      words = this.review[round];
    }
    return [normode[0], normode[1], normode[2], words];
  };

  Game.prototype.minuteFormat = function(t) {
    var minutes, seconds, totseconds;
    totseconds = t / 1000;
    seconds = parseInt(totseconds % 60);
    minutes = parseInt(totseconds / 60);
    if (totseconds / 3600 >= 1.0) {
      minutes = 59;
      seconds = 59;
    }
    return "" + (zfill(minutes, 2)) + ":" + (zfill(seconds, 2));
  };

  Game.prototype.nextloop = function() {
    var error, nerror, nround, nstate, round, state, words, _ref, _ref1;
    _ref = this.curstate, state = _ref[0], round = _ref[1], error = _ref[2];
    if (state === 'goal') {
      console.log('no next cuz of goal');
    }
    _ref1 = this.getnextstate(state, round, error), nstate = _ref1[0], nround = _ref1[1], nerror = _ref1[2], words = _ref1[3];
    console.log(this.curstate, nstate, nround, nerror, words);
    if (!(words != null) || words.length === 0) {
      if (nstate === 'congrat') {
        this.curstate = [nstate, nround, nerror];
        this.switchPage('goal');
        return;
      }
      return console.log('error words is empty');
    } else {
      if (!nerror) {
        this.gameloop(state, round, error, words);
        return this.curstate = [nstate, nround, nerror];
      } else {
        this.gameloop(nstate, nround, nerror, words);
        return this.curstate = this.saveround;
      }
    }
  };

  Game.prototype.dummyitems = function(n) {
    var start, words;
    start = this.wordid + this.newperday;
    words = this.words.slice(start, +(start + n - 1) + 1 || 9e9);
    if (words.length < n) {
      words = words.concat(this.words.slice(0, +(n - words.length - 1) + 1 || 9e9));
    }
    return words;
  };

  Game.prototype.dotips = function(mode, round, error, wordsource) {
    if (mode === 'show' && round === 1) {
      return this.tip(tip.showround1tip);
    } else if (mode === 'match' && round === 1) {
      return this.tip(tip.matchtip);
    }
  };

  Game.prototype.gameloop = function(mode, round, error, wordsource, postsave) {
    var $but, col, datind, errors, prevhanz, swapDat, x, z, _j, _k, _l, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
      _this = this;
    if (mode == null) {
      mode = 'show';
    }
    if (round == null) {
      round = 1;
    }
    if (error == null) {
      error = false;
    }
    if (postsave == null) {
      postsave = false;
    }
    this.dotips(mode, round, error, wordsource);
    this.actualstate = [mode, round, error];
    errors = error ? 'ERROR' : '';
    $("#mode").text("" + (mode.toUpperCase()) + " " + round + " " + errors);
    swapDat = [];
    for (i = _j = 0, _ref = this.Nitems - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      this.clearRow(i);
    }
    this.Nnewitems = wordsource.length;
    if (mode === 'match') {
      wordsource = wordsource.concat(this.dummyitems(this.Nitems - this.Nnewitems));
    }
    prevhanz = [];
    for (i = _k = 0, _ref1 = wordsource.length - 1; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
      this.hanzi[i] = wordsource[i];
      try {
        _ref2 = this.hanzi2data[this.hanzi[i]], this.pinyin[i] = _ref2[0], this.keyword[i] = _ref2[1];
      } catch (err) {
        console.log('error', i, this.hanzi[i], wordsource, this.hanzi);
        throw err;
      }
      this.changeSlot(i, mode);
      if (mode === 'match') {
        swapDat.push(i);
      }
    }
    _ref3 = ['pinyin', 'keyword'];
    for (datind in _ref3) {
      col = _ref3[datind];
      _ref4 = permute(swapDat);
      for (x in _ref4) {
        z = _ref4[x];
        this[col][swapDat[x]] = this.hanzi2data[this.hanzi[z]][datind];
      }
    }
    if (mode === 'match' && this.Nnewitems < this.Nitems) {
      for (i = _l = _ref5 = this.Nnewitems, _ref6 = this.Nitems - 1; _ref5 <= _ref6 ? _l <= _ref6 : _l >= _ref6; i = _ref5 <= _ref6 ? ++_l : --_l) {
        this.hanzi[i] = 'empty';
      }
    }
    this.updateAllSlots();
    this.unselectall();
    if (swapDat.length > 0) {
      this.nextMatchable();
    }
    if (postsave) {
      this.savePost();
    }
    if (mode === 'show' && $('#skipbut').length === 0) {
      $but = $('<a id="skipbut" data-role="button">Continue Skipping Non-selected items"</a>');
      $but.appendTo('#main');
      $but.trigger('create');
      $but.button();
      $but.click((function() {
        return _this.skipbutton();
      }));
    } else if (mode === 'match' && $('#skipbut').length === 1) {
      $('#skipbut').remove();
    }
    return this.loopcount++;
  };

  Game.prototype.elapsedDays = function(h) {
    return getdefault(this.deltaday, h, 0);
  };

  Game.prototype.handleErrors = function() {
    var h, newzis, revzis, zis, _j, _len1,
      _this = this;
    zis = (function() {
      var _results;
      _results = [];
      for (i in this.errormode) {
        if (this.errormode[i] === 'wrong') {
          _results.push(this.hanzi[i]);
        }
      }
      return _results;
    }).call(this);
    newzis = (function() {
      var _j, _len1, _ref, _results;
      _ref = this.hanzi;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        h = _ref[_j];
        if (!(this.interval[h] != null) && h !== '' && h !== 'empty') {
          _results.push(h);
        }
      }
      return _results;
    }).call(this);
    revzis = (function() {
      var _j, _len1, _ref, _results;
      _ref = this.hanzi;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        h = _ref[_j];
        if ((this.interval[h] != null) && h !== '' && h !== 'empty') {
          _results.push(h);
        }
      }
      return _results;
    }).call(this);
    this.stat.addreviewed(this, revzis.length);
    this.stat.addnov(this, newzis.length);
    console.log('new, review, wrong', [newzis, revzis, zis]);
    this.errormode.forEach(function(e, i) {
      var avg, ef, intv, q, timed, zi, _ref;
      if (e === 'correct' || e === 'wrong') {
        zi = _this.hanzi[i];
        _ref = getdefault(_this.interval, zi, [1.0, 0.0]), ef = _ref[0], intv = _ref[1];
        if (e === 'wrong') {
          q = 0;
          addOrSet(_this.succfail, zi, 1);
        }
        if (e === 'correct') {
          _this.succfail[zi] = getdefault(_this.succfail, zi, 0);
          timed = _this.hanzi2clicktime[zi];
          avg = function(a, b) {
            return (a + b) / 2.0;
          };
          q = _this.rowq[i];
          intv = 1.0;
          intv -= _this.elapsedDays(_this.hanzi[i]);
        }
        _this.interval[_this.hanzi[i]] = sm2interval(ef, intv, q);
        return _this.dueday[_this.hanzi[i]] = _this.interval[_this.hanzi[i]][0];
      }
    });
    for (_j = 0, _len1 = zis.length; _j < _len1; _j++) {
      i = zis[_j];
      this.errorwords.push([i, this.loopcount]);
    }
    return this.nextloop();
  };

  Game.prototype.unselectall = function(cols) {
    var col, row, _j, _k, _len1, _len2, _results;
    if (cols == null) {
      cols = ['pinyin', 'hanzi', 'keyword'];
    }
    for (_j = 0, _len1 = cols.length; _j < _len1; _j++) {
      i = cols[_j];
      delete this.select[i];
    }
    _results = [];
    for (_k = 0, _len2 = cols.length; _k < _len2; _k++) {
      col = cols[_k];
      _results.push((function() {
        var _l, _ref, _results1;
        _results1 = [];
        for (row = _l = 0, _ref = this.Nitems - 1; 0 <= _ref ? _l <= _ref : _l >= _ref; row = 0 <= _ref ? ++_l : --_l) {
          _results1.push(this.hilight(col, row, 'off'));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Game.prototype.skipbutton = function() {
    var _j, _ref;
    for (i = _j = 0, _ref = this.Nnewitems - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      if (this.slotmode[i] !== 'done') {
        this.skipped[this.hanzi[i]] = true;
      }
    }
    this.done5();
    return console.log('skipped', this.skipped);
  };

  Game.prototype.done5 = function() {
    var error, round, state, _ref;
    this.ndone = 0;
    if (state === 'match') {
      this.errormode = arrayRepeat("none", this.Nitems);
      this.select = {};
    }
    this.nextloop();
    return _ref = this.curstate, state = _ref[0], round = _ref[1], error = _ref[2], _ref;
  };

  musteq = function(name, a, b) {
    return console.log(name + " " + a + "=" + b);
  };

  Game.prototype.drawTab = function(mode) {
    var $block, $but, $hed, $li, $lst, col2block, column, letters, pairs, _j, _k, _len1, _ref, _ref1;
    if (mode == null) {
      mode = 'show';
    }
    $('#game').empty();
    if (DEBUG === true) {
      console.log('fuck');
      return;
    }
    letters = 'abcdefghijklmnop';
    pairs = (function() {
      var _j, _ref, _results;
      _results = [];
      for (i = _j = 0, _ref = this.cols.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
        _results.push([this.cols[i], letters[i]]);
      }
      return _results;
    }).call(this);
    col2block = hashFromPairs(pairs);
    _ref = this.cols;
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      column = _ref[_j];
      $block = $("<div/>", {
        "id": "" + column + "_col",
        "class": 'ui-block-' + col2block[column]
      });
      $lst = $('<ul id="' + column + '" data-role="listview" data-divider-theme="b" data-inset="true"></ul>');
      $hed = $('<li data-role="list-divider" role="heading">' + column.toUpperCase() + '</li>');
      $lst.append($hed);
      for (i = _k = 0, _ref1 = this.Nitems - 1; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
        $li = $('<li/>', {
          "data-theme": "c",
          "id": column + '_' + i,
          "data-mini": "true",
          "class": "ui-disabled"
        });
        $but = $('<a class="item">empty</a>');
        $li.append($but);
        $lst.append($li);
        $lst.appendTo($block);
      }
      $block.appendTo("#game").trigger("create");
    }
    return this.updateButtons();
  };

  Game.prototype.enterTextMode = function() {
    var $bar, $elt, col, id, text, _j, _k, _len1, _ref, _ref1,
      _this = this;
    this.matchTimer = 1000 * 30;
    this.timerMode = true;
    _ref = this.datacols;
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      col = _ref[_j];
      for (i = _k = 0, _ref1 = this.Nitems - 1; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; i = 0 <= _ref1 ? ++_k : --_k) {
        id = col + '_' + i;
        text = "<div data-role=\"fieldcontain\">\n    						<label for=\"name\" class=\"ui-hidden-accessible\">" + col + " " + i + "</label>\n    						<input type=\"text\" name=\"name\" id=\"" + id + "\" value=\"\" />\n</div>";
        $elt = $('#' + id);
        $elt.html(text).textinput();
        $elt.height($('#hanzi_' + i).height());
        $elt.height($('#hanzi_' + i).height());
      }
    }
    $('.myinput').unbind('click').click(function(e) {
      var row, _ref2;
      _ref2 = $(e.target).attr('id').split('_'), col = _ref2[0], row = _ref2[1];
      return _this.select['hanzi'] = parseInt(row);
    });
    $('.myinput').unbind('change').change(function(e) {
      var row, _ref2;
      if (_this.matchTimer < 0) {
        return;
      }
      _ref2 = $(e.target).attr('id').split('_'), col = _ref2[0], row = _ref2[1];
      if ((_this.lastText != null) && e.target.value.length < _this.lastText.length) {
        _this.matchTimer += 500;
        return _this.lastText = e.target.value;
      }
    });
    $(".bar").animate({
      width: '100%'
    }, {
      duration: this.matchTimer,
      step: function(now, fx) {
        var pc;
        pc = parseInt(now) + '%';
        $(".percent").html(pc);
        return console.log('now', now);
      }
    });
    $bar = $('<div class="bar"><div class="parcent"></div></div>');
    return $('body').append($bar);
  };

  Game.prototype.toneScore = function(word, wordTemplate) {
    var c, curWord, done, lst, t, tn, w, wn;
    lst = [];
    curWord = '';
    done = false;
    w = 0;
    t = 0;
    wn = ((function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = wordTemplate.length; _j < _len1; _j++) {
        c = wordTemplate[_j];
        if (c.match('[a-zA-z]')) {
          _results.push(c);
        }
      }
      return _results;
    })()).join('');
    tn = ((function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = word.length; _j < _len1; _j++) {
        c = word[_j];
        if (c.match('[a-zA-z]')) {
          _results.push(c);
        }
      }
      return _results;
    })()).join('');
    if (word === wordTemplate) {
      return 2;
    } else if (wn === tn) {
      return 1;
    } else {
      return 0;
    }
  };

  Game.prototype.nextMatchable = function() {
    var searchset, selected, start, _j, _k, _len1, _ref, _ref1, _ref2, _results, _results1;
    this.unselectall(['pinyin', 'keyword']);
    start = (_ref = this.select['hanzi']) != null ? _ref : -1;
    selected = null;
    searchset = (function() {
      _results = [];
      for (var _j = _ref1 = start + 1, _ref2 = start + this.Nnewitems; _ref1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; _ref1 <= _ref2 ? _j++ : _j--){ _results.push(_j); }
      return _results;
    }).apply(this);
    searchset = (function() {
      var _k, _len1, _results1;
      _results1 = [];
      for (_k = 0, _len1 = searchset.length; _k < _len1; _k++) {
        i = searchset[_k];
        _results1.push(i % this.Nnewitems);
      }
      return _results1;
    }).call(this);
    _results1 = [];
    for (_k = 0, _len1 = searchset.length; _k < _len1; _k++) {
      i = searchset[_k];
      if (this.slotmode[i] === 'match' && this.errormode[i] === 'none') {
        this.doselect('hanzi', i);
        selected = i;
        this.setclicktime('hanzi', this.select['hanzi'], this.now(), 'match');
        if (this.timerMode) {
          this.nextFocus(i);
        }
        break;
      } else {
        _results1.push(void 0);
      }
    }
    return _results1;
  };

  Game.prototype.nextFocus = function(n) {
    var col, elt, _j, _len1, _ref, _results;
    if (n == null) {
      n = -1;
    }
    if (n === -1) {
      alert('error');
    }
    _ref = this.cols;
    _results = [];
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      col = _ref[_j];
      elt = $('##{col}_#{i}');
      if (elt.value()) {
        _results.push(elt.focus());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Game.prototype.hilight = function(col, id, hi) {
    var guielt;
    if (hi == null) {
      hi = null;
    }
    if (DEBUG === true) {
      return;
    }
    guielt = this.guielt(col, id);
    if (hi === null) {
      return guielt.buttonMarkup({
        'theme': 'e'
      });
    } else {
      return guielt.buttonMarkup({
        'theme': 'c'
      });
    }
  };

  Game.prototype.guielt = function(col, id) {
    return $("#" + col + "_" + id);
  };

  Game.prototype.doselect = function(col, id) {
    var row, _j, _ref;
    for (row = _j = 0, _ref = this.Nnewitems - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; row = 0 <= _ref ? ++_j : --_j) {
      this.hilight(col, row, 'off');
    }
    this.select[col] = id;
    return this.hilight(col, id);
  };

  Game.prototype.flash = function(col, id, start, end) {
    var act, deact, _j, _results;
    if (start == null) {
      start = 'a';
    }
    if (end == null) {
      end = 'c';
    }
    act = function() {
      return $("#" + col + "_" + id).buttonMarkup({
        'theme': start
      });
    };
    deact = function() {
      return $("#" + col + "_" + id).buttonMarkup({
        'theme': end
      });
    };
    _results = [];
    for (i = _j = 0; _j <= 4; i = ++_j) {
      setTimeout(act, i * 150);
      _results.push(setTimeout(deact, i * 150 + 75));
    }
    return _results;
  };

  Game.prototype.pauselock = function(t, func) {
    var unlockf,
      _this = this;
    this.locked = true;
    unlockf = function() {
      _this.locked = false;
      return func();
    };
    return setTimeout(unlockf, t);
  };

  Game.prototype.ziData = function(zi) {
    var keyword, pinyin, _ref;
    try {
      _ref = this.hanzi2data[zi], pinyin = _ref[0], keyword = _ref[1];
    } catch (error) {
      console.log('tried getting zi', zi);
    }
    return {
      'keyword': keyword,
      'pinyin': pinyin
    };
  };

  Game.prototype.markCorrect = function(row, shift, q) {
    var zi;
    if (shift == null) {
      shift = false;
    }
    if (q == null) {
      q = 5.0;
    }
    zi = this.hanzi[row];
    this.errormode[row] = 'correct';
    this.rowq[row] = q;
    this.doslot('hanzi', row, 'match');
    this.chainn += 1;
    Sound.success.play();
    this.skipcorrect++;
    if (!shift) {
      this.nextMatchable();
    }
    return this._matcherror(zi);
  };

  Game.prototype.markWrong = function(zislot, ctrled) {
    var zi;
    if (ctrled == null) {
      ctrled = false;
    }
    zi = this.hanzi[zislot];
    this.errormode[zislot] = 'wrong';
    this.rowq[zislot] = 0;
    this.doslot('hanzi', zislot, 'match');
    if (!ctrled) {
      this.nextMatchable();
    }
    if (this.chainn > 2) {
      this.chains[this.chainn] = getdefault(this.chains, this.chainn, 0) + 1;
    }
    this.chainn = 0;
    Sound.failure.play();
    return this._matcherror(zi);
  };

  Game.prototype._matcherror = function(zi) {
    var PTIME, col, data, _ref,
      _this = this;
    _ref = this.ziData(zi);
    for (col in _ref) {
      data = _ref[col];
      this.flash(col, this[col].indexOf(data));
    }
    if (((function() {
      var _j, _len1, _ref1, _results;
      _ref1 = this.errormode;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        i = _ref1[_j];
        if (i === 'correct' || i === 'wrong') {
          _results.push(i);
        }
      }
      return _results;
    }).call(this)).length === this.Nnewitems) {
      this.unselectall();
      PTIME = 0;
      return this.pauselock(PTIME, function() {
        return _this.handleErrors();
      });
    }
  };

  Game.prototype.matchFunc = function(id, col, shifted, ctrled, timeMode) {
    var c, d, matched, zi, zislot, _j, _len1, _ref, _ref1;
    if (shifted == null) {
      shifted = false;
    }
    if (ctrled == null) {
      ctrled = false;
    }
    if (timeMode == null) {
      timeMode = false;
    }
    if (col === 'hanzi') {
      if (!shifted && !ctrled) {
        return this.doselect(col, id);
      } else if (shifted) {
        this.markCorrect(id, shifted);
        return this.rowq[id] = 5;
      } else if (ctrled) {
        return this.markWrong(id, ctrled);
      }
    } else if ((this.select['hanzi'] != null) || timeMode) {
      matched = this[col][parseInt(id)];
      zislot = this.select['hanzi'];
      zi = this.hanzi[zislot];
      if (this.ziData(zi)[col] === matched) {
        this.doselect(col, id);
        if (this.matchdata(zi)) {
          d = {
            hanzi: this.getclicktime('hanzi', (_ref = this.select['hanzi']) != null ? _ref : this.getclicktime('hanzi', this.select['hanzi'], 'match'))
          };
          _ref1 = this.datacols;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            c = _ref1[_j];
            d[c] = this.getclicktime(c, this.select[c]);
          }
          this.hanzi2clicktime[zi] = d;
          return this.markCorrect(zislot, shifted);
        }
      } else {
        if (this.errormode[zislot] !== 'wrong') {
          return this.markWrong(zislot);
        }
      }
    }
  };

  Game.prototype.setclicktime = function(col, row, v, match) {
    if (match == null) {
      match = '';
    }
    return this.clicktime["" + col + "_" + row + match] = v;
  };

  Game.prototype.getclicktime = function(col, row, match) {
    if (match == null) {
      match = '';
    }
    return this.clicktime["" + col + "_" + row + match];
  };

  Game.prototype.updateButtons = function() {
    var _this = this;
    $("#game .item").unbind('click').click(function(e) {
      var col, id, _ref;
      if (_this.locked) {
        return;
      }
      _ref = $(e.target).parent().parent().parent().attr('id').split('_'), col = _ref[0], id = _ref[1];
      _this.saveState();
      _this.setclicktime(col, id, _this.now());
      if (_this.DEBUG['click']) {
        console.log([col, id, _this.slotmode[id]]);
      }
      if (_this.slotmode[id] === 'show') {
        return _this.markDone(id);
      } else if (_this.slotmode[id] === 'match') {
        return _this.matchFunc(id, col, e.shiftKey, e.ctrlKey);
      }
    });
    return $(document).unbind('keypress').keypress(function(e) {
      var q, _j, _ref;
      if (_this.actualstate[0] === 'show') {
        if (e.keyCode === 27) {
          _this.done5();
        }
      }
      if (_this.actualstate[0] === 'match') {
        if (e.keyCode === 27) {
          for (i = _j = 0, _ref = _this.Nnewitems - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
            if (Math.random() < 0.5) {
              _this.markCorrect(i, false, randItem([2, 3, 4]));
            } else {
              _this.markWrong(i);
            }
          }
          return;
        }
        q = e.charCode - 48;
        if (q >= 1 && q <= 4) {
          if (q === 1) {
            return _this.markWrong(_this.select['hanzi']);
          } else {
            _this.markCorrect(_this.select['hanzi'], false, q + 1);
            return _this.skipcorrect++;
          }
        }
      }
    });
  };

  Game.prototype.action = function(elt, evt, func) {
    var decfunc,
      _this = this;
    decfunc = function(e) {
      _this.laststate = Object.clone(_this);
      return func(e);
    };
    $(elt).off(evt);
    return $(elt).on(evt, decfunc);
  };

  Game.prototype.gameElt = function() {
    return $("#gamepage");
  };

  Game.prototype.saveState = function(s) {
    var savedata;
    if (s == null) {
      s = localStorage;
    }
    savedata = {
      ob: this.clone(),
      ui: this.gameElt().html()
    };
    return s.save = JSON.stringify(savedata);
  };

  Game.prototype.savePost = function() {
    this.gameurl = '/';
    return $.post(this.gameurl, {
      data: JSON.stringify({
        ob: this.clone(),
        ui: this.gameElt().html()
      })
    }, function() {
      return null;
    }, 'json');
  };

  Game.prototype.reloadGet = function() {
    var _this = this;
    this.gameurl = '/';
    return $.getJSON(this.gameurl, function(data) {
      return _this.reload(data);
    });
  };

  Game.prototype.reload = function(state) {
    var col, key, newstat, nonempty, ob, row, _ref, _results;
    if (state == null) {
      state = null;
    }
    if (!(state != null)) {
      state = $.parseJSON(localStorage.save);
    }
    ob = state['ob'];
    for (key in ob) {
      this[key] = ob[key];
    }
    this._Tips = copyObject(Tips, this._Tips);
    newstat = new Stats(this);
    Object.update(newstat, this.stat);
    this.stat = newstat;
    this.drawTab();
    this.updateButtons();
    console.log('hanzi is', this.hanzi);
    nonempty = function(lst) {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = lst.length; _j < _len1; _j++) {
        i = lst[_j];
        if (i !== 'empty') {
          _results.push(i);
        }
      }
      return _results;
    };
    this.gameloop(this.actualstate[0], this.actualstate[1], this.actualstate[2], nonempty(this.hanzi.slice(0)));
    _ref = this.select;
    _results = [];
    for (col in _ref) {
      row = _ref[col];
      _results.push(this.hilight(col, row));
    }
    return _results;
  };

  Game.prototype.call = function(funcname, args, succf, failf) {
    var func, rest, _ref;
    if (succf == null) {
      succf = (function() {
        return null;
      });
    }
    if (failf == null) {
      failf = (function() {
        return null;
      });
    }
    this.gameurl = '/';
    _ref = funcname.split('_'), func = _ref[0], rest = _ref[1];
    return $.ajax({
      type: func.toUpperCase(),
      contentType: "application/json",
      url: this.gameursl,
      data: JSON.stringify({
        'function': funcname,
        'args': args
      }),
      success: succf,
      failure: failf
    });
  };

  Game.prototype.testremote = function() {
    this.call('post_story', ['力', 'Die maggots']);
    this.call('post_story', ['B', 'Die magghhots']);
    this.call('post_story', ['C', 'Die maggots']);
    this.call('post_story', ['D', 'Die ggots']);
    this.call('post_vote', ['test@example.com', 'B', 1]);
    this.call('post_vote', ['test@example.com', 'B', -1]);
    return this.call('get_stories', ['B'], function(res, stat, xhr) {
      return console.log(res, stat, xhr);
    });
  };

  Game.prototype.undo = function() {
    if (this.laststatec > 1) {
      this.laststatec--;
      return this.reload(this.laststate[this.laststatec]);
    }
  };

  Game.prototype.clearRow = function(i) {
    this.hanzi[i] = "";
    this.pinyin[i] = "";
    this.keyword[i] = "";
    this.slotmode[i] = "";
    this.errormode[i] = "";
    this.rowq[i] = -1;
    return this.updateSlot(i);
  };

  Game.prototype.markDone = function(i) {
    this.ndone++;
    this.changeSlot(i, 'done');
    if (this.ndone === this.Nnewitems) {
      return this.done5();
    }
  };

  Game.prototype.clickOn = function(col, id) {
    return this.guielt(col, id).find('a').trigger('click');
  };

  Game.prototype.matchhand = function(f) {
    var _j, _ref;
    if (f == null) {
      f = (function() {
        return randItem(['correct', 'wrong']);
      });
    }
    for (i = _j = 0, _ref = this.Nnewitems - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      this.errormode[i] = f();
    }
    return this.handleErrors();
  };

  Game.prototype.cmatch = function() {
    return this.matchhand(function() {
      return 'correct';
    });
  };

  Game.prototype.markAllCorrect = function() {
    var _j, _ref;
    for (i = _j = 0, _ref = this.Nnewitems - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
      this.markCorrect(i);
    }
    return null;
  };

  return Game;

})();

errlog = function(s) {
  return LOG += s + "\n";
};

Done5Time = 2;

this.select = {};

this.timers = [];

LOG = "";

Globals = {
  mygame: null,
  tests: []
};

all = function(lst) {
  var _j, _len1;
  for (_j = 0, _len1 = lst.length; _j < _len1; _j++) {
    i = lst[_j];
    if (!i) {
      return false;
    }
  }
  return true;
};

any = function(lst) {
  var _j, _len1;
  for (_j = 0, _len1 = lst.length; _j < _len1; _j++) {
    i = lst[_j];
    if (i) {
      return true;
    }
  }
  return false;
};

eql = function(o, cond, val, op) {
  var evl, sup;
  if (op == null) {
    op = (function(a, b) {
      return a === b;
    });
  }
  window['g'] = o;
  evl = JSON.stringify(eval(cond));
  sup = JSON.stringify(val);
  if (sup === evl) {
    return Globals.tests.push([cond, evl, sup, 'SUCCESS']);
  } else {
    return Globals.tests.push([cond, evl, sup, 'FAILURE']);
  }
};

neql = function(o, cond, val) {
  return eql(o, cond, val, (function(a, b) {
    return a !== b;
  }));
};

test1 = function() {
  var cond, g, gg, hanzi2data, inner11, inner2, join, passes, result, stime, sup, test2, testint, v, words, _j, _k, _l, _len1, _ref, _ref1, _results, _results1;
  words = ['我', '的', '我的', '你', '你的', '我们', '你们', '喜', '喜爱', '爱', '喜欢', '欢'];
  hanzi2data = {
    '我': ['wo3', 'I'],
    '的': ['de', '\'s'],
    '我的': ['wo3de', 'my'],
    '你': ['ni3', 'you'],
    '你的': ['ni3de', 'your'],
    '我们': ['wo3men', 'we'],
    '你们': ['ni3men', 'you all'],
    '喜': ['xi3', 'to enjoy'],
    '喜爱': ['xi3ai4', 'to like'],
    '爱': ['ai4', 'love'],
    '喜欢': ['xi3huan1', 'to like'],
    '欢': ['huan1', 'happy']
  };
  words = words.concat((function() {
    _results = [];
    for (_j = 0; _j <= 27; _j++){ _results.push(_j); }
    return _results;
  }).apply(this));
  for (i = _k = 0; _k <= 27; i = ++_k) {
    hanzi2data[i] = ["p" + i, "k" + i];
  }
  Globals.mygame = new Game(words, hanzi2data, Done5Time = 1, this.cols = ['hanzi', 'pinyin', 'keyword']);
  g = Globals.mygame;
  stime = Date.now();
  testint = function(nowt) {
    var matchhand;
    if (nowt == null) {
      nowt = false;
    }
    console.log('nowtime is ', stime - g.nowtime);
    g.switchPage('start');
    $('#reviewbut').trigger('click');
    g.done5();
    g.done5();
    matchhand = function(f) {
      var _l, _ref;
      if (f == null) {
        f = (function() {
          return randItem(['correct', 'wrong']);
        });
      }
      for (i = _l = 0, _ref = g.Nnewitems - 1; 0 <= _ref ? _l <= _ref : _l >= _ref; i = 0 <= _ref ? ++_l : --_l) {
        g.errormode[i] = f();
      }
      return g.handleErrors();
    };
    if (nowt) {
      console.log('fix this');
    }
    matchhand();
    matchhand();
    if (g.curstate[0] !== 'congrat') {
      console.log('hanzi is', g.hanzi);
      g.done5();
      g.done5();
      matchhand(function() {
        return 'correct';
      });
      matchhand(function() {
        return 'correct';
      });
    }
    return console.log(g.dueday.toSource());
  };
  oeu.test2 = test2 = function(n) {
    if (n == null) {
      n = 5;
    }
    g.nowtime = tomorrow(n);
    $('#reviewbut').trigger('click');
    g.markAllCorrect();
    return g.done5();
  };
  testint();
  $('#finishbut').trigger('click');
  test2();
  inner2 = function() {
    var mything,
      _this = this;
    g.switchPage('start');
    $('#reviewbut').trigger('click');
    Globals.showclick = function() {
      var _l, _results1;
      _results1 = [];
      for (i = _l = 0; _l <= 9; i = ++_l) {
        _results1.push(g.clickOn('hanzi', i));
      }
      return _results1;
    };
    Globals.showclick();
    Globals.showclick();
    Globals.eachThing = function(i) {
      var d, keyword, kslot, pinslot, pinyin, rongslot, useslot, _ref;
      eql(g, "g.select['hanzi']", i);
      try {
        _ref = g.hanzi2data[g.hanzi[i]], pinyin = _ref[0], keyword = _ref[1];
      } catch (err) {
        console.log(g.hanzi[i]);
      }
      pinslot = g.pinyin.indexOf(pinyin);
      rongslot = (pinslot - 5 + 1) % 5 + 5;
      useslot = Math.random() < 0.5 ? 'correct' : 'wrong';
      d = {
        'correct': pinslot,
        'wrong': rongslot
      };
      g.clickOn('pinyin', d[useslot]);
      if (useslot === 'wrong') {
        return eql(g, "g.errormode[" + i + "]", 'wrong');
      } else {
        kslot = g.keyword.indexOf(keyword);
        g.clickOn('keyword', kslot);
        return eql(g, "g.errormode[" + i + "]", 'correct');
      }
    };
    mything = function(i) {
      return g.errormode = randItem(['correct', 'wrong']);
    };
    return oeu.clickit = function() {
      var _l, _ref, _results1;
      _results1 = [];
      for (i = _l = 0, _ref = g.Nnewitems; 0 <= _ref ? _l <= _ref : _l >= _ref; i = 0 <= _ref ? ++_l : --_l) {
        _results1.push(Globals.eachThing(i));
      }
      return _results1;
    };
  };
  join = function(lst) {
    var s, _l, _len1;
    s = '';
    for (_l = 0, _len1 = lst.length; _l < _len1; _l++) {
      i = lst[_l];
      s += ' ' + i;
    }
    return s;
  };
  gg = function() {
    var _l, _results1;
    g.gamestarttime = Date.now();
    _results1 = [];
    for (i = _l = 0; _l <= 8; i = ++_l) {
      g.nextloop();
      console.log(i, g.actualstate, join(g.hanzi));
      if (g.actualstate[0] === 'match') {
        g.errorwords = g.errorwords.concat((function() {
          var _len1, _m, _ref, _results2;
          _ref = g.hanzi;
          _results2 = [];
          for (_m = 0, _len1 = _ref.length; _m < _len1; _m++) {
            i = _ref[_m];
            if (Math.random() > 0.9) {
              _results2.push([i, g.loopcount]);
            }
          }
          return _results2;
        })());
        _results1.push(console.log('errorwords', g.errorwords));
      } else if (g.actualstate[0] === 'goal') {
        break;
      } else {
        _results1.push(void 0);
      }
    }
    return _results1;
  };
  inner11 = function() {
    var items, mh, samp, sampqueue, select, _l, _m, _results1;
    sampqueue = [
      {
        't': 0,
        'items': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      }
    ];
    items = g.queuepop(5, sampqueue);
    eql(items, 'g', (function() {
      var _l, _results1;
      _results1 = [];
      for (i = _l = 10; _l >= 6; i = --_l) {
        _results1.push([i, 'match']);
      }
      return _results1;
    })());
    g.gameloop();
    g.first4slots = g.slotmode.slice(0, 5);
    eql(g, 'g.first4slots', (function() {
      var _l, _results1;
      _results1 = [];
      for (i = _l = 0; _l <= 4; i = ++_l) {
        _results1.push('show');
      }
      return _results1;
    })());
    for (i = _l = 0; _l <= 4; i = ++_l) {
      g.clickOn('hanzi', i);
    }
    g.first4slots = g.slotmode.slice(0, 5);
    eql(g, 'g.first4slots', (function() {
      var _m, _results1;
      _results1 = [];
      for (i = _m = 0; _m <= 4; i = ++_m) {
        _results1.push('');
      }
      return _results1;
    })());
    samp = ['我', '的', '我的', '你', '你的'];
    samp.reverse();
    eql(g, 'g.showqueue[0].items', samp);
    eql(g, 'g.showqueue[0].t', Done5Time);
    g.gameloop();
    eql(g, 'g.showqueue[0].t', Done5Time - 1);
    g.gameloop();
    eql(g, 'g.showqueue', []);
    g.last5 = g.slotmode.slice(5, 10);
    eql(g, 'g.last5', (function() {
      var _m, _results1;
      _results1 = [];
      for (i = _m = 5; _m <= 9; i = ++_m) {
        _results1.push('match');
      }
      return _results1;
    })());
    mh = 0;
    select = function(i) {
      var d, keyword, kslot, pinslot, pinyin, rongslot, useslot, _ref;
      eql(g, "g.select['hanzi']", i);
      try {
        _ref = g.hanzi2data[g.hanzi[i]], pinyin = _ref[0], keyword = _ref[1];
      } catch (e) {
        console.log('trying to get i', i, g.hanzi[i]);
      }
      pinslot = g.pinyin.indexOf(pinyin);
      rongslot = (pinslot - 5 + 1) % 5 + 5;
      useslot = Math.random() < 0.5 ? 'correct' : 'wrong';
      d = {
        'correct': pinslot,
        'wrong': rongslot
      };
      g.clickOn('pinyin', d[useslot]);
      if (useslot === 'wrong') {
        return eql(g, "g.errormode[" + i + "]", 'wrong');
      } else {
        kslot = g.keyword.indexOf(keyword);
        g.clickOn('keyword', kslot);
        return eql(g, "g.errormode[" + i + "]", 'correct');
      }
    };
    _results1 = [];
    for (i = _m = 5; _m <= 9; i = ++_m) {
      _results1.push(select(i));
    }
    return _results1;
  };
  passes = 0;
  _ref = Globals.tests;
  _results1 = [];
  for (_l = 0, _len1 = _ref.length; _l < _len1; _l++) {
    _ref1 = _ref[_l], cond = _ref1[0], v = _ref1[1], sup = _ref1[2], result = _ref1[3];
    if (result === 'FAILURE') {
      _results1.push(console.log("" + cond + "=" + v + "?=" + sup + " " + result));
    } else {
      _results1.push(void 0);
    }
  }
  return _results1;
};

charts = {
  StudyTime: {
    axes: {
      xaxis: {
        label: 'Day'
      },
      yaxis: {
        label: 'Minutes'
      }
    }
  },
  Interval: {
    seriesDefaults: {
      renderer: $.jqplot.BarRenderer,
      rendererOptions: {
        barDirection: 'horizontal',
        rendererOptions: {
          fillToZero: true
        }
      }
    },
    pointLabels: {
      show: true,
      formatString: '%d'
    },
    axesDefaults: {
      labelRenderer: $.jqplot.CanvasAxisLabelRenderer
    },
    axes: {
      xaxis: {
        label: 'Interval Day'
      },
      yaxis: {
        label: 'Number of Cards'
      }
    }
  },
  TotalDue: {
    axes: {
      xaxis: {
        label: 'Day'
      },
      yaxis: {
        label: 'Number of Cards'
      }
    }
  },
  Due: {
    axes: {
      xaxis: {
        label: 'Day'
      },
      yaxis: {
        label: 'Number of Cards'
      }
    }
  },
  NewCards: {
    axes: {
      xaxis: {
        label: 'Day'
      },
      yaxis: {
        label: 'Number of Cards'
      }
    }
  },
  ReviewCards: {
    axes: {
      xaxis: {
        label: 'Day'
      },
      yaxis: {
        label: 'Number of Cards'
      }
    }
  }
};

betw = function(start, x, end) {
  var chartpoints;
  start <= x && x >= end;
  chartpoints = {
    StudyTime: function(game, stat, start, end) {
      var d, v, _ref, _results;
      _ref = stat.days;
      _results = [];
      for (d in _ref) {
        v = _ref[d];
        if (betw(start, d, end)) {
          _results.push([d, v.time]);
        }
      }
      return _results;
    }
  };
  return {
    NewCards: function(game, stat, start, end) {
      var d, v, _ref, _results;
      _ref = stat.nNew;
      _results = [];
      for (d in _ref) {
        v = _ref[d];
        if (betw(start, d, end)) {
          _results.push([d, v]);
        }
      }
      return _results;
    },
    ReviewCards: function(game, stat, start, end) {
      var d, v, _ref, _results;
      _ref = stat.nreviewed;
      _results = [];
      for (d in _ref) {
        v = _ref[d];
        if (betw(start, d, end)) {
          _results.push([d, v]);
        }
      }
      return _results;
    },
    Interval: function(game, stat, start, end) {
      var count, d, k, v, _ref, _ref1, _results;
      count = {};
      _ref = game.interval;
      for (k in _ref) {
        v = _ref[k];
        if (betw(start, d, end)) {
          addOrSet(count, parseInt(v[0]));
        }
      }
      _ref1 = game.count;
      _results = [];
      for (d in _ref1) {
        v = _ref1[d];
        _results.push([d, v.time]);
      }
      return _results;
    },
    Due: function(game, stat, start, end) {
      var count, d, k, v, _ref, _ref1, _results;
      count = {};
      _ref = game.dueday;
      for (k in _ref) {
        v = _ref[k];
        if (betw(start, d, end)) {
          addOrSet(count, parseInt(v[0]));
        }
      }
      _ref1 = game.count;
      _results = [];
      for (d in _ref1) {
        v = _ref1[d];
        _results.push([d, v.time]);
      }
      return _results;
    },
    TotalDue: function(game, stat, start, end) {
      var d, int, s, v, _j, _results;
      int = chartpoints.Due(game, stat, start, end);
      d = [];
      s = 0;
      for (i = _j = start; start <= end ? _j <= end : _j >= end; i = start <= end ? ++_j : --_j) {
        v = getdefault(int, i);
        s += v;
        d.push([i, s]);
      }
      _results = [];
      for (d in d) {
        v = d[d];
        _results.push([d, v]);
      }
      return _results;
    }
  };
};

tip = {
  showround1tip: "Here you will be showed a list of words.  Check each list item when you believe \nthat you are ready to recall it later.  Also a good idea to remove any items\nthat will be too difficult or interesting to review so you can focus on learning words that\nyou want to learn.  When you have checked all of the items you will proceed",
  matchtip: "On this screen we see how well you remembered your items.  Match the corresponding\ncolumns.  Depending on how fast you are determines the review interval.  You can override\nthe interval by pressing the number keys 1-4."
};

Tips = (function() {

  function Tips() {
    this._tips = {};
  }

  Tips.prototype.tip = function(msg) {
    var enabled, stripendlines;
    enabled = false;
    if (!enabled) {
      return;
    }
    if (!(msg != null)) {
      console.log('msg is ');
    }
    stripendlines = function(txt) {
      var s;
      s = txt.replace(/(\r\n|\n|\r)/gm, " ");
      return s.replace(/\s+/g, " ");
    };
    if (!(this._tips[msg] != null)) {
      $('#dialogmsg').text(stripendlines(msg));
      $.mobile.changePage('#popupDialog', 'pop', true, true);
      if ($('#checkbox1').is(':checked')) {
        return this._tips[msg] = true;
      }
    }
  };

  return Tips;

})();

App = (function() {

  App.prototype.setupfooter = function() {
    $('div[data-role="page"] div[data-role="footer"]').each(function() {
      $(this).html($('#startpage footer').html());
      return console.log($(this).attr('id'));
    });
    return $('div[data-role="page"]').each(function() {
      return $(this).trigger('createpage');
    });
  };

  function App() {
    var hanzi2data, words, _j, _k, _results,
      _this = this;
    this.gamepage = null;
    this.curmode = 'Home';
    words = ['我', '的', '我的', '你', '你的', '我们', '你们', '喜', '喜爱', '爱', '喜欢', '欢'];
    hanzi2data = {
      '我': ['wo3', 'I'],
      '的': ['de', '\'s'],
      '我的': ['wo3de', 'my'],
      '你': ['ni3', 'you'],
      '你的': ['ni3de', 'your'],
      '我们': ['wo3men', 'we'],
      '你们': ['ni3men', 'you all'],
      '喜': ['xi3', 'to enjoy'],
      '喜爱': ['xi3ai4', 'to like'],
      '爱': ['ai4', 'love'],
      '喜欢': ['xi3huan1', 'to like'],
      '欢': ['huan1', 'happy']
    };
    words = words.concat((function() {
      _results = [];
      for (_j = 0; _j <= 27; _j++){ _results.push(_j); }
      return _results;
    }).apply(this));
    for (i = _k = 0; _k <= 27; i = ++_k) {
      hanzi2data[i] = ["p" + i, "k" + i];
    }
    this.game = new Game(words, hanzi2data, Done5Time = 1, this.cols = ['hanzi', 'pinyin', 'keyword']);
    this.game.switchPage('start');
    $('#footer a').click(function(e) {
      if (e.target.classList[0] === 'ui-icon') {
        e = $(e.target).parent();
      } else {
        e = e.target;
      }
      return _this.changeNavi(e);
    });
  }

  App.prototype.changePage = function(page) {
    return $.mobile.changePage('#' + page);
  };

  App.prototype.curPage = function() {
    return $.mobile.activePage;
  };

  App.prototype.changeNavi = function(e) {
    var mode;
    this.navi = $('#navi');
    mode = $(e).text().replace(/\s+/g, '');
    console.log('mode is ', mode);
    if (mode !== 'Home' && this.curmode === 'Home') {
      this.gamepage = $.mobile.activePage.attr('id');
    }
    if (mode === 'Graphs') {
      this.changePage('graphpage');
      setupcharts();
    } else if (mode === 'Browse') {
      this.changePage('listpage');
      $('#newbutton').unbind('click').click(function() {
        return $.mobile.changePage('#createlistpage');
      });
    } else if (mode === 'Home') {
      this.changePage(this.gamepage);
    } else if (mode === 'Info') {
      alert('Not implemented');
    }
    return this.curmode = mode;
  };

  return App;

})();

setupcharts = function() {
  var $graphnav, makechart, v, x;
  if (setupcharts.called != null) {
    return;
  }
  setupcharts.called = true;
  $graphnav = $('#graphnav');
  makechart = function(chartid) {
    var chart, maxdays, ndays, points;
    if (chartid == null) {
      chartid = null;
    }
    console.log('make chart call');
    ndays = parseInt($('#days').val());
    chartid = chartid || $('#graphnav .ui-btn-active').text();
    chart = charts[chartid];
    $('#chart1').css({
      'width': $('#footer').width()
    });
    chart.axesDefaults = {
      labelRenderer: $.jqplot.CanvasAxisLabelRenderer
    };
    $('#chart1').empty();
    maxdays = Object.count(this.game.stat.days);
    points = chartponts[chartid](this.game, this.game.stat, ndays - ncount, maxdays);
    return $.jqplot("chart1", [points], chart);
  };
  x = 0;
  for (i in charts) {
    v = charts[i];
    $("#nav" + x).text(i);
    x += 1;
  }
  $('#graphpage').trigger('createpage');
  $('#graphnav a').click(function() {
    return makechart();
  });
  $('#days').change(function() {
    return makechart();
  });
  return $('#nav0').trigger('click');
};

$(document).on('init', '[data-role="page"]', function() {
  console.log('page init', this);
  return $(this).find('#foo1').html($('#startpage #footer'));
});

$(document).ready(function() {
  test1();
  return window['oeu'] = Globals.mygame;
});
